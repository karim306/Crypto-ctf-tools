from cryptography.hazmat.primitives import serialization
from cryptography.hazmat.primitives.asymmetric import padding
from Cryptodome.Util.number import inverse
# Now you can use long_to_bytes
from cryptography.hazmat.primitives.asymmetric.rsa import rsa_crt_dmp1



import binascii

n = 118641897764566817417551054135914458085151243893181692085585606712347004549784923154978949512746946759125187896834583143236980760760749398862405478042140850200893707709475167551056980474794729592748211827841494511437980466936302569013868048998752111754493558258605042130232239629213049847684412075111663446003

p = 151441473357136152985216980397525591305875094288738820699069271674022167902643

q = 15624342005774166525024608067426557093567392652723175301615422384508274269305

e = 65537
c = 89324045690602869481652658486351339869198672768736701592429212304314533347858594205757446218939914303967856123839679139473271834304062869248490565974410595134225264907338201163806547498645818214774799223745778571520715284454812557151032292363465413074728466451907769449253663046303316417858104680022166905974
phi = (p-1) * (q-1)

d = inverse(e , phi)

plainText = pow(c,  d, n)

long_integer = plainText

# Convert long integer to byte string
byte_string = long_integer.to_bytes((long_integer.bit_length() + 7) // 8, 'big')

print(byte_string)